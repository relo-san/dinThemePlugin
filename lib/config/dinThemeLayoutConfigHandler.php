<?php

/**
 * This file is part of the dinThemePlugin package.
 * (c) DineCat, 2010 http://dinecat.com/
 * 
 * For the full copyright and license information, please view the LICENSE file,
 * that was distributed with this package, or see http://www.dinecat.com/din/license.html
 */

/**
 * Class for handle theme layouts modules configuration
 * 
 * @package     dinThemePlugin
 * @subpackage  lib.config
 * @author      Nicolay N. Zyk <relo.san@gmail.com>
 */
class dinThemeLayoutConfigHandler extends sfYamlConfigHandler
{

    /**
     * Create PHP code with config data for cache
     * 
     * @param   array   $configFiles    Array with configuration file path's
     * @return  string  Generated PHP code with config data for cache
     */
    public function execute( $configFiles )
    {

        $config = self::parseYamls( $configFiles );

        $data = array();
        if ( $config )
        {
            $data[] = "switch ( sfConfig::get( 'app_view_theme', 'default' ) )\n{";
            foreach ( $config as $theme => $envs )
            {
                $this->theme = $theme;
                $env = sfConfig::get( 'sf_environment' );
                $data[] = "    case '" . $theme . "':";
                $data[] = '        ' . $this->configEnvironment( $envs, isset( $envs[$env] ) ? $env : 'all', 2 );
                $data[] = '        break;';
            }
            $data[] = "}\n";
        }

        return sprintf(
            '<' . "?php\n\n// auto-generated by dinThemeLayoutConfigHandler\n// date: %s\n\n%s\n//EOF",
            date( 'Y/m/d H:i:s' ),
            implode( "\n", $data )
        );

    } // dinThemeLayoutConfigHandler::execute()


    /**
     * Generate PHP code with environment configuration
     * 
     * @param   array   $config         Configuration data of specified theme
     * @param   string  $environment    Environment name
     * @param   integer $indent         Indent for generated PHP code [optional]
     * @return  string  Generated part of PHP code with config data for cache
     */
    private function configEnvironment( $config, $environment, $indent = 0 )
    {

        $indent = str_repeat( ' ', $indent * 4 );
        if ( $environment !== 'all' )
        {
            $config['all'] = $this->extendConfig( $config['all'], $config[$environment] );
        }
        $config = $config['all'];

        if ( count( $config ) > 1 )
        {

            // if isset rules for specified action
            $data[] = 'switch ( $this->actionName )';
            $data[] = $indent . '{';
            foreach ( $config as $action => $params )
            {
                $data[] = $indent . "    case '" . $action . "':";
                $data[] = $indent . "        sfConfig::set( 'theme_" . $this->theme . "_action', "
                        . $this->arrayAction( $config, $action, 8 ) . ' );';
                $data[] = $indent . "        sfConfig::set( 'theme_" . $this->theme . "_layouts', "
                        . $this->arrayLayouts( $config, $action, 8 ) . ' );';
                $data[] = $indent . "        sfConfig::set( 'theme_" . $this->theme . "_components', "
                        . $this->arrayComponents( $config, $action, 8 ) . ' );';
                $data[] = $indent . '        break;';
            }
            $data[] = $indent . '    default:';
            $data[] = $indent . "        sfConfig::set( 'theme_" . $this->theme . "_action', "
                    . $this->arrayAction( $config, 'all', 8 ) . ' );';
            $data[] = $indent . "        sfConfig::set( 'theme_" . $this->theme . "_layouts', "
                    . $this->arrayLayouts( $config, 'all', 8 ) . ' );';
            $data[] = $indent . "        sfConfig::set( 'theme_" . $this->theme . "_components', "
                    . $this->arrayComponents( $config, 'all', 8 ) . ' );';
            $data[] = $indent . '        break;';
            $data[] = $indent . "}\n";

        }
        else
        {

            // if isset rules only for all actions
            $data[] = "sfConfig::set( 'theme_" . $this->theme . "_action', "
                    . $this->arrayAction( $config, 'all', 4 ) . ' );';
            $data[] = $indent . "sfConfig::set( 'theme_" . $this->theme . "_layouts', "
                    . $this->arrayLayouts( $config, 'all', 4 ) . ' );';
            $data[] = $indent . "sfConfig::set( 'theme_" . $this->theme . "_components', "
                    . $this->arrayComponents( $config, 'all', 4 ) . " );";

        }
        return implode( "\n", $data );

    } // dinThemeLayoutConfigHandler::configEnvironment()


    /**
     * Generate PHP code with action configuration
     * 
     * @param   array   $config     Configuration data of specified environment
     * @param   string  $action     Action name
     * @param   integer $indent     Indent for generated PHP code [optional]
     * @return  string  Generated part of PHP code with config data for cache
     */
    private function arrayAction( $config, $action, $indent = 0 )
    {

        $indent = str_repeat( ' ', $indent * 4 );
        if ( $action !== 'all' )
        {
            $config['all'] = $this->extendConfig( $config['all'], $config[$action] );
        }
        $config = $config['all'];

        $data[] = 'array(';
        foreach ( $config['action'] as $key => $value )
        {
            $value = is_integer( $value ) ? $value : "'" . $value . "'";
            $data[] = $indent . "    '" . $key . "' => " . $value . ",";
        }
        $data[] = $indent . ')';

        return implode( "\n", $data );

    } // dinThemeLayoutConfigHandler::arrayAction()


    /**
     * Generate PHP code with layout configuration
     * 
     * @param   array   $config     Configuration data of specified environment
     * @param   string  $action     Action name
     * @param   integer $indent     Indent for generated PHP code [optional]
     * @return  string  Generated part of PHP code with config data for cache
     */
    private function arrayLayouts( $config, $action, $indent = 0 )
    {

        $indent = str_repeat( ' ', $indent * 4 );
        if ( $action !== 'all' )
        {
            $config['all'] = $this->extendConfig( $config['all'], $config[$action] );
        }
        $config = $config['all'];

        // sort layouts for correct nesting
        uasort( $config['layouts'], 'dinThemeLayoutConfigHandler::sortLayouts' );

        $data[] = 'array(';
        foreach ( $config['layouts'] as $layout => $params )
        {
            $data[] = $indent . "    '" . $layout . "' => array(";
            foreach ( $params as $key => $value )
            {
                $value = is_integer( $value ) ? $value : "'" . $value . "'";
                $data[] = $indent . "        '" . $key . "' => " . $value . ",";
            }
            $data[] = $indent . '    ),';
        }
        $data[] = $indent . ')';

        return implode( "\n", $data );

    } // dinThemeLayoutConfigHandler::arrayLayouts()


    /**
     * Generate PHP code with components configuration
     * 
     * @param   array   $config     Configuration data of specified environment
     * @param   string  $action     Action name
     * @param   integer $indent     Indent for generated PHP code [optional]
     * @return  string  Generated part of PHP code with config data for cache
     */
    private function arrayComponents( $config, $action, $indent = 0 )
    {

        $indent = str_repeat( ' ', $indent * 4 );
        if ( $action !== 'all' )
        {
            $config['all'] = $this->extendConfig( $config['all'], $config[$action] );
        }
        $config = $config['all'];

        $data[] = 'array(';
        if ( $config['components'] )
        {
            foreach ( $config['components'] as $component => $actions )
            {
                $data[] = $indent . "    '" . $component . "' => array(";
                foreach ( $actions as $action => $params )
                {
                    $data[] = $indent . "        '" . $action . "' => array(";
                    foreach ( $params as $key => $value )
                    {
                        if ( $key == 'vars' && is_array( $value ) )
                        {
                            $vvalue = 'array(';
                            foreach ( $value as $vk => $vv )
                            {
                                $vv = is_integer( $vv ) ? $vv : "'" . $vv . "'";
                                $vvalue .= "'" . $vk . "' => " . $vv . ",";
                            }
                            $value = $vvalue . ')';
                        }
                        else
                        {
                            $value = is_integer( $value ) ? $value : "'" . $value . "'";
                        }
                        $data[] = $indent . "        '" . $key . "' => " . $value . ",";
                    }
                    $data[] = $indent . '        ),';
                }
                $data[] = $indent . '    ),';
            }
        }
        $data[] = $indent . ')';

        return implode( "\n", $data );

    } // dinThemeLayoutConfigHandler::arrayComponents()


    /**
     * Merging configs with overlay
     * 
     * @param   array   $config     Base config
     * @param   array   $extended   Extended config
     * @return  array   Merged config
     */
    private function extendConfig( $config, $extended )
    {

        foreach ( $extended as $k => $v )
        {
            if ( isset( $config[$k] ) && is_array( $v ) )
            {
                $config[$k] = $this->extendConfig( $config[$k], $v );
                continue;
            }
            $config[$k] = $v;
        }
        return $config;

    } // dinThemeLayoutConfigHandler::extendConfig()


    /**
     * Method for compare nesting for uasort function
     * 
     * @param   array   $a  Layout array part
     * @param   array   $b  Layout array part
     * @return  integer Compared result
     */
    static public function sortLayouts( $a, $b )
    {

        if ( $a['nesting'] == $b['nesting'] )
        {
            return 0;
        }
        return ( $a['nesting'] > $b['nesting'] ) ? -1 : 1;

    } // dinThemeLayoutConfigHandler::sortLayouts()

} // dinThemeLayoutConfigHandler

//EOF